#! /usr/bin/perl
# ABSTRACT: Count reads based on a GFF/GTF annotation file
# PODNAME: cractools count

use strict;
use warnings;

use Getopt::Long qw(:config auto_version ); # Get options
use Carp;
use Pod::Usage;
use CracTools::App::Count;
use CracTools::Output; # For printing output column-based file

=head1 SYNOPSIS

  cractools count [options] file.gff file.bam [file2.bam file3.bam]

=head1 OPTIONS

  --help                 Print this help
  --man                  Open man page
  -f                     Feature type to count
  -v|--verbose           Verbose mode
  -p=INT                 Number of process to run (default:1)

=cut  

run() unless caller();

sub run {
  my @ARGV_copy = @ARGV;

  my ($help,
    $man,
    $verbose,
  );

  my $nb_process = 1;
  my $feature_type = "exon";
  my $is_stranded = 0;

  GetOptions(
    "v|verbose"         => \$verbose,
    "p=i"               => \$nb_process,
    "man"               => \$man,
    "help"              => \$help,
    "f=s"               => \$feature_type,
    "stranded"          => \$is_stranded,
  ) or pod2usage(-verbose => 1);

  # TODO implement is_stranded 

  pod2usage(-verbose => 1)  if ($help);
  pod2usage(-verbose => 2)  if ($man);

  my $annot_file = shift @ARGV;
  pod2usage(-verbose => 1)  unless defined $annot_file;

  my $bam_file = shift @ARGV;
  pod2usage(-verbose => 1)  unless defined $bam_file;

  my $counter = CracTools::App::Count->new(feature_type => $feature_type, is_stranded => $is_stranded);
  my %counts = %{$counter->getCounts($annot_file,$bam_file)};

  # Now we print output
  my $output = CracTools::Output->new();
  $output->printHeaders(args => \@ARGV_copy);
  foreach my $count_key (sort keys %counts) {
    $output->printLine($count_key,$counts{$count_key});
  }
}
